/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { Context } from './api/context';

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {
  OrderStatus: 'CANCELLED' | 'DELIVERED' | 'ORDERED';
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: any;
  DateTime: any;
}

export interface NexusGenObjects {
  Admin: {
    // root type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    passwordHash: string; // String!
    refreshToken?: string | null; // String
    username: string; // String!
  };
  Customer: {
    // root type
    age: number; // Int!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    passwordHash: string; // String!
    username: string; // String!
  };
  Item: {
    // root type
    id: string; // ID!
    quantity: number; // Int!
    total: number; // Float!
  };
  ItemView: {
    // root type
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    price: number; // Float!
  };
  Mutation: {};
  Order: {
    // root type
    address: string; // String!
    id: string; // ID!
    orderDate: NexusGenScalars['DateTime']; // DateTime!
    reference: string; // String!
    status: NexusGenEnums['OrderStatus']; // OrderStatus!
    total: number; // Float!
  };
  Query: {};
  Tokens: {
    // root type
    accessToken: string; // String!
    refreshToken: string; // String!
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes &
  NexusGenScalars &
  NexusGenEnums;

export interface NexusGenFieldTypes {
  Admin: {
    // field return type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    passwordHash: string; // String!
    refreshToken: string | null; // String
    username: string; // String!
  };
  Customer: {
    // field return type
    age: number; // Int!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    orders: NexusGenRootTypes['Order'][]; // [Order!]!
    passwordHash: string; // String!
    username: string; // String!
  };
  Item: {
    // field return type
    id: string; // ID!
    order: NexusGenRootTypes['Order'] | null; // Order
    quantity: number; // Int!
    reference: NexusGenRootTypes['ItemView']; // ItemView!
    total: number; // Float!
  };
  ItemView: {
    // field return type
    description: string; // String!
    id: string; // ID!
    item: NexusGenRootTypes['Item'][]; // [Item!]!
    name: string; // String!
    price: number; // Float!
  };
  Mutation: {
    // field return type
    adminLogin: string | null; // String
    adminLogout: string | null; // String
    adminUpdate: NexusGenRootTypes['Admin'] | null; // Admin
    customerCreateOne: NexusGenRootTypes['Customer'] | null; // Customer
    orderUpsertOne: NexusGenRootTypes['Order'] | null; // Order
  };
  Order: {
    // field return type
    address: string; // String!
    customer: NexusGenRootTypes['Customer']; // Customer!
    id: string; // ID!
    items: NexusGenRootTypes['Item'][]; // [Item!]!
    orderDate: NexusGenScalars['DateTime']; // DateTime!
    reference: string; // String!
    status: NexusGenEnums['OrderStatus']; // OrderStatus!
    total: number; // Float!
  };
  Query: {
    // field return type
    adminGet: NexusGenRootTypes['Admin'] | null; // Admin
    adminGets: Array<NexusGenRootTypes['Admin'] | null> | null; // [Admin]
    adminIsAuthorized: boolean | null; // Boolean
    customerGetMany: Array<NexusGenRootTypes['Customer'] | null> | null; // [Customer]
    customerGetOne: NexusGenRootTypes['Customer'] | null; // Customer
    hello: string | null; // String
    itemGetMany: Array<NexusGenRootTypes['Item'] | null> | null; // [Item]
    itemGetOne: NexusGenRootTypes['Item'] | null; // Item
    orderGetMany: Array<NexusGenRootTypes['Order'] | null> | null; // [Order]
    orderGetOne: NexusGenRootTypes['Order'] | null; // Order
  };
  Tokens: {
    // field return type
    accessToken: string; // String!
    refreshToken: string; // String!
  };
}

export interface NexusGenFieldTypeNames {
  Admin: {
    // field return type name
    email: 'String';
    firstName: 'String';
    id: 'ID';
    lastName: 'String';
    passwordHash: 'String';
    refreshToken: 'String';
    username: 'String';
  };
  Customer: {
    // field return type name
    age: 'Int';
    email: 'String';
    firstName: 'String';
    id: 'ID';
    lastName: 'String';
    orders: 'Order';
    passwordHash: 'String';
    username: 'String';
  };
  Item: {
    // field return type name
    id: 'ID';
    order: 'Order';
    quantity: 'Int';
    reference: 'ItemView';
    total: 'Float';
  };
  ItemView: {
    // field return type name
    description: 'String';
    id: 'ID';
    item: 'Item';
    name: 'String';
    price: 'Float';
  };
  Mutation: {
    // field return type name
    adminLogin: 'String';
    adminLogout: 'String';
    adminUpdate: 'Admin';
    customerCreateOne: 'Customer';
    orderUpsertOne: 'Order';
  };
  Order: {
    // field return type name
    address: 'String';
    customer: 'Customer';
    id: 'ID';
    items: 'Item';
    orderDate: 'DateTime';
    reference: 'String';
    status: 'OrderStatus';
    total: 'Float';
  };
  Query: {
    // field return type name
    adminGet: 'Admin';
    adminGets: 'Admin';
    adminIsAuthorized: 'Boolean';
    customerGetMany: 'Customer';
    customerGetOne: 'Customer';
    hello: 'String';
    itemGetMany: 'Item';
    itemGetOne: 'Item';
    orderGetMany: 'Order';
    orderGetOne: 'Order';
  };
  Tokens: {
    // field return type name
    accessToken: 'String';
    refreshToken: 'String';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    adminLogin: {
      // args
      password: string; // String!
      username: string; // String!
    };
    adminUpdate: {
      // args
      firstName?: string | null; // String
      lastName?: string | null; // String
    };
    customerCreateOne: {
      // args
      age: number; // Int!
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      password: string; // String!
      username: string; // String!
    };
    orderUpsertOne: {
      // args
      customerId: string; // ID!
    };
  };
  Query: {
    customerGetMany: {
      // args
      filter?: string | null; // ID
    };
    customerGetOne: {
      // args
      id: string; // ID!
    };
    itemGetMany: {
      // args
      filter?: string | null; // ID
    };
    itemGetOne: {
      // args
      id: string; // ID!
    };
    orderGetMany: {
      // args
      filter?: string | null; // ID
    };
    orderGetOne: {
      // args
      id: string; // ID!
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
